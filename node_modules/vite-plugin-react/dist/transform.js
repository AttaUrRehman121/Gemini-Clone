"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reactRefreshTransform = void 0;
const serverPlugin_1 = require("./serverPlugin");
exports.reactRefreshTransform = {
    test: ({ path, isBuild }) => {
        if (!/\.(t|j)sx?$/.test(path)) {
            return false;
        }
        if (isBuild || process.env.NODE_ENV === 'production') {
            // do not transform for production builds
            return false;
        }
        if (isDependency(path) && !path.endsWith('x')) {
            // do not transform if this is a dep and is not jsx/tsx
            return false;
        }
        return true;
    },
    transform: ({ code, path }) => {
        const isReasonReact = path.endsWith('.bs.js');
        const result = require('@babel/core').transformSync(code, {
            plugins: [
                require('@babel/plugin-syntax-import-meta'),
                require('react-refresh/babel')
            ],
            ast: !isReasonReact,
            sourceMaps: true,
            sourceFileName: path
        });
        if (!/\$RefreshReg\$\(/.test(result.code)) {
            // no component detected in the file
            return code;
        }
        const header = `
  import RefreshRuntime from "${serverPlugin_1.runtimePublicPath}";

  let prevRefreshReg;
  let prevRefreshSig;

  if (!window.__vite_plugin_react_preamble_installed__) {
    throw new Error(
      "vite-plugin-react can't detect preamble. Something is wrong. See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201"
    );
  }

  if (import.meta.hot) {
    prevRefreshReg = window.$RefreshReg$;
    prevRefreshSig = window.$RefreshSig$;
    window.$RefreshReg$ = (type, id) => {
      RefreshRuntime.register(type, ${JSON.stringify(path)} + " " + id)
    };
    window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
  }`.replace(/[\n]+/gm, '');
        const footer = `
  if (import.meta.hot) {
    window.$RefreshReg$ = prevRefreshReg;
    window.$RefreshSig$ = prevRefreshSig;

    ${isReasonReact || isRefreshBoundary(result.ast)
            ? `import.meta.hot.accept();`
            : ``}
    if (!window.__vite_plugin_react_timeout) {
      window.__vite_plugin_react_timeout = setTimeout(() => {
        window.__vite_plugin_react_timeout = 0;
        RefreshRuntime.performReactRefresh();
      }, 30);
    }
  }`;
        return {
            code: `${header}${result.code}${footer}`,
            map: result.map
        };
    }
};
function isDependency(path) {
    return path.startsWith(`/@modules/`) || path.includes('node_modules');
}
function isRefreshBoundary(ast) {
    // Every export must be a React component.
    return ast.program.body.every((node) => {
        if (node.type !== 'ExportNamedDeclaration') {
            return true;
        }
        const { declaration, specifiers } = node;
        if (declaration && declaration.type === 'VariableDeclaration') {
            return declaration.declarations.every(({ id }) => id.type === 'Identifier' && isComponentishName(id.name));
        }
        return specifiers.every(({ exported }) => exported.type === 'Identifier' && isComponentishName(exported.name));
    });
}
function isComponentishName(name) {
    return typeof name === 'string' && name[0] >= 'A' && name[0] <= 'Z';
}
//# sourceMappingURL=transform.js.map